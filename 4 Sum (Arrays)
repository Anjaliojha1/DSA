class Solution(object):
    def fourSum(self, nums, target):
        nums.sort()  # Sort the array
        result = []  # To store the result quadruplets
        n = len(nums)

        for i in range(n - 3):  # First loop
            if i > 0 and nums[i] == nums[i - 1]:  # Skip duplicate elements for the first element
                continue

            for j in range(i + 1, n - 2):  # Second loop
                if j > i + 1 and nums[j] == nums[j - 1]:  # Skip duplicate elements for the second element
                    continue

                left, right = j + 1, n - 1  # Initialize two pointers

                while left < right:  # Two-pointer approach
                    total = nums[i] + nums[j] + nums[left] + nums[right]

                    if total == target:  # Found a quadruplet
                        result.append([nums[i], nums[j], nums[left], nums[right]])
                        
                        # Skip duplicate elements for the third element
                        while left < right and nums[left] == nums[left + 1]:
                            left += 1
                        # Skip duplicate elements for the fourth element
                        while left < right and nums[right] == nums[right - 1]:
                            right -= 1
                        
                        left += 1
                        right -= 1
                    
                    elif total < target:  # Increase the sum by moving left pointer
                        left += 1
                    else:  # Decrease the sum by moving right pointer
                        right -= 1

        return result  # Return the result list




        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
