def subarray_sum(nums, target):
    sum_index = {0: -1}  # Initialize with 0 sum at index -1 to handle cases where the subarray starts from index 0
    current_sum = 0
    for i, num in enumerate(nums):
        current_sum += num
        complement = current_sum - target
        
        if complement in sum_index:
            return [sum_index[complement] + 1, i]  # Return the start and end indices of the subarray
        
        sum_index[current_sum] = i  # Store the current cumulative sum with its index

    return []  # Return an empty list if no subarray found


# Test cases
nums = [1, 2, 3, 4, 5]
target = 9
print(subarray_sum(nums, target))  # Output: [1, 3]

nums = [-1, 2, 3, -4, 5]
target = 0
print(subarray_sum(nums, target))  # Output: [0, 3]

nums = [2, 3, 4, 5, 6]
target = 3
print(subarray_sum(nums, target))  # Output: [1, 1]

nums = []
target = 0
print(subarray_sum(nums, target))  # Output: []
